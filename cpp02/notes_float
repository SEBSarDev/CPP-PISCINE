https://inst.eecs.berkeley.edu//~cs61c/sp06/handout/fixedpt.html!
In a decimal system, a decimal point denotes the position in a numeral that the coefficient should multiply by 100 = 1. For example, in the numeral 26.5, the coefficient 6 has a weight of 100 = 1. But what happen to the 5 to the right of decimal point? We know from our experience, that it carries a weight of 10-1. We know the numeral "26.5" represents the value "twenty six and a half" because

    2 * 10^1 + 6 * 10^0 + 5 * 10^-1 = 26.5
==  2 * 10   + 6 * 1    + 5 * 0.1   = 26.5

The very same concept of decimal point can be applied to our binary representation, making a "binary point". As in the decimal system, a binary point represents the coefficient of the term 20 = 1. All digits (or bits) to the left of the binary point carries a weight of 20, 21, 22, and so on. Digits (or bits) on the right of binary point carries a weight of 2-1, 2-2, 2-3, and so on. For example, the number:

11010.1
represents the value:

|2^5 | 2^4 | 2^3 | 2^2 | 2^1 |	2^0 | binary point | 2^-1 | 2^-2 | 2^-3 |
|... |  1  |   1 |   0 |   1 |   0	|           .  |    1 |    0 | ...  |

= 1 * 2^4 + 1 * 2^3 + 0 * 2^2 + 1 * 2^1 + 0* 2^0 + 1 * 2^-1

= 

= 16 + 8 + 2 + 0.5

= 26.5
A careful reader should now realize the bit pattern of 53 and 26.5 is exactly the same. The only difference, is the position of binary point. In the case of 5310, there is "no" binary point. Alternatively, we can say the binary point is located at the far right, at position 0. (Think in decimal, 53 and 53.0 represents the same number.)
Now, recall in class, we discuss shifting an integer to the right by 1 bit position is equivalent to dividing the number by 2. In the case of integer, since we don't have a fractional part, we simply cannot represent digit to the right of a binary point, making this shifting process an integer division. However, it is simply a limitation of integer representations of binary number.

In general, mathematically, given a fixed binary point position, shifting the bit pattern of a number to the right by 1 bit always divide the number by 2. Similarly, shifting a number to the left by 1 bit multiplies the number by 2.

we can define a fixed point number type simply by implicitly fixing the binary point to be at some position of a numeral. We will then simply adhere to this implicit convention when we represent numbers.

To define a fixed point type conceptually, all we need are two parameters:

width of the number representation, and
binary point position within the number
We will use the notation fixed<w,b> for the rest of this article, where w denotes the number of bits used as a whole (the Width of a number), and b denotes the position of binary point counting from the least significant bit (counting from 0).

For example, fixed<8,3> denotes a 8-bit fixed point number, of which 3 right most bits are fractional. Therefore, the bit pattern:

0	0	0	1	0	1	1	0
represents a real number:

00010.110
= 1 * 21 + 1 * 2-1 + 1 * 2-1

= 2 + 0.5 + 0.25

= 2.75


https://www.cprogramming.com/tutorial/floating_point/understanding_floating_point.html
--> les int ont un degree d'exactitudes qui match paraitement avec le calcul en bit-a-bit. en revanche il ne peuvent assumer la division.ils manque de precision car ne peuvent recuperer les partie fractionne.
--> float c'est l'inverse, tres bonne precisions du nombre decimal, mais par contre tres mauvais exactitude par rapport au bit a bit. il ne collera jamais avec un chiffre exact bit-a-bit. car il est trop precis. il y a tjrs un arrondi, finalement c'es le bit a bit qu n'est pas assez precis pour le float.

donc selon la longueur du nombre et ou se trouve la virgule, ou si 'est un int donnera pas le meme nb, normal.


https://www.cprogramming.com/tutorial/floating_point/understanding_floating_point_representation.html

https://www.cprogramming.com/tutorial/floating_point/understanding_floating_point_printing.htmli
